<!doctype html>
<html>

	<head>
		<meta charset="UTF-8">
		<title></title>
		<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
		<link href="css/mui.min.css" rel="stylesheet" />
		<link rel="stylesheet" type="text/css" href="css/style.css"/>
		<style type="text/css">
			.activity-list img{
				height: 100px;
			}
		</style>
	</head>

	<body>
		<header class="mui-bar mui-bar-nav">
		    <h1 class="mui-title">活动</h1>
		</header>
		<div class="mui-content">
		   <div class="activity-list">
		   		<ul>
		   			<li v-for="item in list" >
		   				<a href="#" @tap="open_detail(item)"><span ><img :src="item.pic"></span></a>
		   			</li>
		   		</ul>
		   </div>
		</div>
	 <script src="js/mui.min.js"></script>
	 <script src="js/app.js" type="text/javascript" charset="utf-8"></script>
	 <script src="js/vue.min.js" type="text/javascript"></script>
	 <script type="text/javascript">
	 	var webview_detail=null;
	 	mui.plusReady(function() {
	 		webview_detail = mui.preload({
				url: 'activityDetail.html',
				id: 'activityDetail',
				styles: {
					"render": "always",
					"popGesture": "hide",
					"bounce": "vertical",
					"bounceBackground": "#efeff4",
				}
			});
	 	})
	 	
	 	function open_detail(item){
	 		var lkFlag =item.lkFlag;
	 	 	var content =item.content;
			if('1'==lkFlag){
				mui.fire(webview_detail, 'get_detail', {
					content:content,
				});
				setTimeout(function () {
					webview_detail.show("slide-in-right", 300);
				},0);
			}else if(2==lkFlag){
				mui.openWindow({
					url: ''+item.actLink,
					id: '_open'+item.actLink,
					show: {
						aniShow: 'pop-in'
					},
					styles: {
						popGesture: 'hide'
					},
					waiting: {
						autoShow: true
					},
					extras: {
					},
				});
			}
		 	return;	
 		}
	 	 
	 	 mui.init({
	 	 	pullRefresh: {
					container: '.activity-list',
					down: {
						style: 'circle',
						offset: '0px',
						auto:true,
						callback: function() {
							if(window.plus && plus.networkinfo.getCurrentType() === plus.networkinfo.CONNECTION_NONE) {
								plus.nativeUI.toast('network error..', {
									verticalAlign: 'top'
								});
								return;
							}
							activityData.list =[];
							initActivityData();
							 mui('.activity-list').pullRefresh().endPulldown();
						}
					}
				}
	 	 })
	 	 
	 	 var activityData =new Vue({
	 	 	 el:'.mui-content',
	 	 	 data:{
	 	 	 	list:[]
	 	 	 }
	 	 })
	 	 
	 	 function initActivityData(){
 			mui.getJSON(app.serverApi(app.apiConstant.queryNoticeActivitys),{},function(res){
 				if(0!=res.code){
					 plus.nativeUI.toast(res.msg);
				}else{
					var activitys =res.data.activitys;
					var imgRoot =res.data.imgDomain;
					if(activitys&&null!=activitys){
						for(var i=0;i<activitys.length;i++){
							var json ={};
							json.content ="...";
							json.lkFlag=activitys[i].lkFlag+'';
							if(activitys[i].content){
								json.content =activitys[i].content;
							};
							json.pic ="";
							if(activitys[i].pic){
								json.pic =imgRoot+activitys[i].pic;
							};
							json.actLink ="";
							if('2'==json.lkFlag&&activitys[i].actLink){
								json.actLink =activitys[i].actLink+"";
							}
							activityData.list.push(json);
						}
						
						
					}
					
				}
				
			})
	 	 }
	 	 
	 </script>
	</body>
</html>