package com.we.service.userTask;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;
import com.we.common.Constant.Const;
import com.we.common.Constant.ReCode;
import com.we.common.redis.RK;
import com.we.core.Page;
import com.we.core.web.ReMsg;
import com.we.models.DocName;
import com.we.models.userTask.Task;
import com.we.service.BaseService;

@Service
public class TaskService extends BaseService {

	static final Logger log = LoggerFactory.getLogger(TaskService.class);

	public DBObject findById(Long id) {
		return super.findById(DocName.TASK, id);
	}

	public DBObject findByTelegramID(Long telegramId) {
		return getC(DocName.TASK).findOne(new BasicDBObject("telegramId", telegramId));
	}

	public Page<DBObject> query(Long _id, Integer type, Integer templateId, Integer status, Integer page,
			Integer size) {
		size = getSize(size);
		page = getPage(page);
		List<DBObject> dbos = find(_id, type, templateId, status, page, size);
		Integer count = count(_id, type, templateId, status);
		return new Page<DBObject>(count, size, page, dbos);
	}

	public List<DBObject> find(Long _id, Integer type, Integer templateId, Integer status, Integer page, Integer size) {
		DBObject q = new BasicDBObject();
		if (null != templateId && templateId != 0) {
			q.put("templateId", templateId);
		}
		if (null != status && status != 0) {
			q.put("status", status);
		}
		if (null != type && type != 0) {
			q.put("type", type);
		}
		if (null != _id && _id != 0) {
			q.put("_id", _id);
		}
		return getC(DocName.TASK).find(q).sort(new BasicDBObject("sort", -1)).skip(getStart(page, size))
				.limit(getSize(size)).toArray();
	}

	public Integer count(Long _id, Integer type, Integer templateId, Integer status) {
		DBObject q = new BasicDBObject();
		if (null != templateId && templateId != 0) {
			q.put("templateId", templateId);
		}
		if (null != status && status != 0) {
			q.put("status", status);
		}
		if (null != type && type != 0) {
			q.put("type", type);
		}
		if (null != _id && _id != 0) {
			q.put("_id", _id);
		}
		return getC(DocName.TASK).find(q).count();
	}

	/** 获取所有的上线任务 */
	public List<DBObject> findAllOnlineTasks(Integer status) {
		// 带有缓存的查询
		ValueOperations<String, String> opsv = getRedisTemplate().opsForValue();
		String objects = opsv.get(RK.taskList(status));
		if (objects != null) {
			List<DBObject> curL = (List<DBObject>) JSON.parse(objects);
			return curL;
		}
		DBObject q = new BasicDBObject();
		if (status != null && status != 0) {
			q.put("status", status);
		}

//		long time = System.currentTimeMillis(); // 1500
//		q.put("startTime", new BasicDBObject("$lte", time));// 开始时间小于当前时间 // 1000
//		q.put("endTime", new BasicDBObject("$gte", time));// 结束时间大于当前时间 // 2000

		List<DBObject> dbos = getC(DocName.TASK).find(q).sort(new BasicDBObject("sort", 1)).toArray();
		opsv.set(RK.taskList(status), JSON.serialize(dbos), 7, TimeUnit.DAYS);
		return dbos;

		// DBObject q = new BasicDBObject();
		// if (status != null && status != 0) {
		// q.put("status", status);
		// }
		//
		// long time = System.currentTimeMillis(); // 1500
		// q.put("startTime", new BasicDBObject("$lte", time));// 开始时间小于当前时间 // 1000
		// q.put("endTime", new BasicDBObject("$gte", time));// 结束时间大于当前时间 // 2000
		//
		// return getC(DocName.TASK).find(q).sort(new BasicDBObject("sort",
		// -1)).toArray();
	}

	/** 更新任务信息 */
	public ReMsg upSet(Long _id, Integer type, String title, String[] coinType, Integer[] coinAmount,
			Integer templateId, int endCondition, int status, Integer sort, Long telegramId, String telegramUrl,
			String twitterId, Long startTime, Long endTime, String detail, String pic) {
		if (null == _id || _id < 1) {
			_id = super.getNextId(DocName.TASK);
		}
		HashMap<String, Integer> rewards = new HashMap<String, Integer>();
		if (coinType != null && coinType.length > 0) {
			for (int i = 0; i < coinType.length; i++) {
				if (StringUtils.isNotBlank(coinType[i]) && coinAmount[i] != null && coinAmount[i] > 0) {
					rewards.put(coinType[i], coinAmount[i]);
				}
			}
		}
		Task task = new Task(type, title, rewards, templateId, endCondition, sort, status, telegramId, telegramUrl,
				twitterId, startTime, endTime, detail, pic);
		task.set_id(_id);
		task.setUpdateTime(System.currentTimeMillis());
		getMongoTemplate().save(task);
		// 删除缓存
		super.getRedisTemplate().delete(RK.taskList(Const.STATUS_OK));
		return new ReMsg(ReCode.OK, task);
	}

	/** 删除任务 */
	public void delTask(long _id) {
		getC(DocName.TASK).remove(new BasicDBObject("_id", _id));
		// FIXME 同步删除用户任务进度表中的所有关于这个任务的数据
		getC(DocName.USER_TASK).remove(new BasicDBObject("taskId", _id));
		// 删除缓存
		super.getRedisTemplate().delete(RK.taskList(Const.STATUS_OK));
	}
}
