package com.we.service;

import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.WriteConcern;
import com.we.common.Constant.ReCode;
import com.we.common.crypto.MDUtil;
import com.we.common.mongo.DboUtil;
import com.we.common.redis.RK;
import com.we.common.utils.MailUtil;
import com.we.common.utils.RegexUtil;
import com.we.core.web.ReMsg;
import com.we.models.DocName;
import com.we.models.MailLog;

@Service
public class MailLogService extends BaseService {

	static final Logger log = LoggerFactory.getLogger(MailLogService.class);

	@Autowired
	UserService userService;
	
	public ReMsg saveMailLog(String mailNo, String code, Long uid, String ip) {
		long id = super.getNextId(DocName.MAIL_LOG);
		MailLog mailLog = new MailLog(id,mailNo,code,uid,ip);
		super.getMongoTemplate().save(mailLog);
		return new ReMsg(ReCode.OK);
	}
	
	public DBObject findByCode(String code) {
		return getC(DocName.MAIL_LOG).findOne(new BasicDBObject("code", code));
	}
	
	public DBObject findByUidTime(Long uid) {
		List<DBObject> list =getC(DocName.MAIL_LOG).find(new BasicDBObject("uid", uid)).sort(new BasicDBObject("updateTime", -1)).toArray();
		if(list!=null&&list.size()>0) {
			return list.get(0);
		}
		return  null;
	}
	public ReMsg updateMailStatus(String code,Integer status,Integer sendStatus) {
		DBObject u = new BasicDBObject("updateTime", System.currentTimeMillis());
		if(status!=null) {
			u.put("status",status);
		}
		if(sendStatus!=null) {
			u.put("sendStatus", sendStatus);
		}
		if (getC(DocName.MAIL_LOG).update(new BasicDBObject("code", code), new BasicDBObject("$set", u), false, false,
				WriteConcern.ACKNOWLEDGED).getN() > 0) {
			return new ReMsg(ReCode.OK);
		}
		return new ReMsg(ReCode.FAIL);
	}
	
	public ReMsg sendMailToUser(HttpServletRequest req,String mailNo,Long uid) {
		if (!RegexUtil.isEmail(mailNo)) {
			return new ReMsg(ReCode.EMAIL_PATTERN_ERR);
		}
		String codeMd5 = getRedisTemplate().opsForValue().get(RK.toMailNo(mailNo));
		if(codeMd5==null) {
			if(userService.findByEmail(mailNo)!=null) {
				return new ReMsg(ReCode.Mail_REGED_ERR);
			}
			//发送
			 codeMd5 = MDUtil.MD5.getMD5(uid+random(6));
			 String urlPath = getUrlPath(req)+"/my/updatePassedEmail/"+codeMd5;
			 
			String body  = "<a href=\""+urlPath+"\">点击认证您绑定的邮箱"+mailNo+"。</a>";
			String subject = "认证您的邮箱";
			
			MailUtil.sendMailByJava(mailNo, subject, body);
			log.info("---发送本人要认证邮箱：---"+body);
			
				saveMailLog(mailNo,codeMd5,uid,super.getIp(req));
				//getRedisTemplate().opsForValue().set(RK.toMailNo(mailNo), codeMd5, 5, TimeUnit.MINUTES);
				DBObject mailLogdb =findByUidTime(uid);
				if(mailLogdb!=null&&DboUtil.getString(mailLogdb, "code")!=null) {
					super.getRedisTemplate().delete(RK.receiveMailCode(DboUtil.getString(mailLogdb, "code")));
				}
				getRedisTemplate().opsForValue().set(RK.receiveMailCode(codeMd5), String.valueOf(uid), 1, TimeUnit.DAYS);
				return new ReMsg(ReCode.OK);
			
			
		}
		return new ReMsg(ReCode.Mail_TO_TIME_LIMIT);
	}
	
	public static String getUrlPath(HttpServletRequest req) {
		String urlPath = "";
		int port =req.getServerPort();
		if(port>0)urlPath =":"+port;
		if(StringUtils.isNotEmpty(req.getContextPath()))urlPath+="/"+req.getContextPath();
		return "http://"+req.getServerName()+urlPath;
	}
	
	public static String random(int size) {
		if (size <= 0) {
			throw new IllegalArgumentException("size must > 0");
		}
		char[] result = new char[size];
		Random random = ThreadLocalRandom.current();
		for (int i = 0; i < size; i++) {
			int t = random.nextInt(10);
			result[i] = (char) (t + 48);
		}
		return new String(result);
	}
	

	
	

	

	
}
