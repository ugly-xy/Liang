package com.we.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.we.common.Constant.Const;
import com.we.common.Constant.ReCode;
import com.we.core.Page;
import com.we.core.web.ReMsg;
import com.we.models.DocName;
import com.we.models.UserIdentity;

/** 用户的身份认证 */
@Service
public class UserIdentityService extends BaseService {

	static final Logger log = LoggerFactory.getLogger(UserIdentityService.class);

	/** 后台审核 改状态 */
	public ReMsg validUseridentity(final Long _id, final Integer status, long adminId) {
		super.getC(DocName.USER_IDENTITY).update(new BasicDBObject("_id", _id),
				new BasicDBObject("$set", new BasicDBObject("status", status).append("adminId", adminId)
						.append("updateTime", System.currentTimeMillis())));
		return new ReMsg(ReCode.OK);
	}

	public Page<DBObject> query(Long _id, Integer status, Integer page, Integer size) {
		size = getSize(size);
		page = getPage(page);
		List<DBObject> dbos = find(_id, status, page, size);
		int count = count(_id, status);
		return new Page<DBObject>(count, size, page, dbos);
	}

	public int count(Long _id, Integer status) {
		DBObject q = new BasicDBObject();
		if (_id != null && _id > 0) {
			q.put("_id", _id);
		}
		if (status != null && status != 0) {
			q.put("status", status);
		}
		return getC(DocName.USER_IDENTITY).find(q).count();
	}

	public List<DBObject> find(Long _id, Integer status, Integer page, Integer size) {
		DBObject q = new BasicDBObject();
		if (_id != null && _id > 0) {
			q.put("_id", _id);
		}
		if (status != null && status != 0) {
			q.put("status", status);
		}
		return getC(DocName.USER_IDENTITY).find(q).skip(super.getStart(page, size)).limit(getSize(size))
				.sort(new BasicDBObject("updateTime", -1)).toArray();
	}

	public DBObject findById(long _id) {
		return getC(DocName.USER_IDENTITY).findOne(new BasicDBObject("_id", _id));
	}

	public ReMsg saveUserIdentity(long _id, String[] pics, String realname, String number) {
		UserIdentity userIdentity = new UserIdentity(_id, pics, Const.STATUS_DEF, realname, number);
		userIdentity.setUpdateTime(System.currentTimeMillis());
		super.getMongoTemplate().save(userIdentity);
		return new ReMsg(ReCode.OK);
	}

}
