package com.we.service.userTask;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.we.common.Constant.Const;
import com.we.common.Constant.ReCode;
import com.we.common.mongo.DboUtil;
import com.we.common.utils.DateUtil;
import com.we.core.Page;
import com.we.core.web.ReMsg;
import com.we.models.DocName;
import com.we.models.finance.CoinLog;
import com.we.models.userTask.Task;
import com.we.models.userTask.UserTask;
import com.we.service.BaseService;
import com.we.service.TelegramService;
import com.we.service.UserWalletService;

@Service
public class UserTaskService extends BaseService {

	static final Logger log = LoggerFactory.getLogger(UserTaskService.class);

	@Autowired
	TaskService taskService;

	@Autowired
	UserWalletService userWalletService;

	@Autowired
	TelegramService telegramService;

	public DBObject findById(Long id) {
		return super.findById(DocName.USER_TASK, id);
	}

	public DBObject findByUidAndtaskId(Long uid, Long taskId) {
		return getC(DocName.USER_TASK).findOne(new BasicDBObject("uid", uid).append("taskId", taskId));
	}

	/** 删除用户任务记录 */
	public void delUserTask(long uid, long taskId) {
		getC(DocName.USER_TASK).remove(new BasicDBObject("uid", uid).append("taskId", taskId));
	}

	/** 删除用户任务记录 */
	public void delUserTask(long _id) {
		getC(DocName.USER_TASK).remove(new BasicDBObject("_id", _id));
	}

	public Page<DBObject> query(Long uid, Long taskId, Integer status, Integer page, Integer size) {
		size = getSize(size);
		page = getPage(page);
		List<DBObject> dbos = find(uid, taskId, status, page, size);
		Integer count = count(uid, taskId, status);
		return new Page<DBObject>(count, size, page, dbos);
	}

	public List<DBObject> find(Long uid, Long taskId, Integer status, Integer page, Integer size) {
		DBObject q = new BasicDBObject();
		if (null != uid && uid != 0) {
			q.put("uid", uid);
		}
		if (null != taskId && taskId != 0) {
			q.put("taskId", taskId);
		}
		if (null != status && status != 0) {
			q.put("status", status);
		}
		return getC(DocName.USER_TASK).find(q).sort(new BasicDBObject("sort", -1)).skip(getStart(page, size))
				.limit(getSize(size)).toArray();
	}

	/** 查询用户所有的任务记录 */
	public List<DBObject> find(Long uid, Long taskId) {
		DBObject q = new BasicDBObject();
		if (null != uid && uid != 0) {
			q.put("uid", uid);
		}
		if (null != taskId && taskId != 0) {
			q.put("taskId", taskId);
		}
		return getC(DocName.USER_TASK).find(q).sort(new BasicDBObject("sort", -1)).toArray();
	}

	public Integer count(Long uid, Long taskId, Integer status) {
		DBObject q = new BasicDBObject();
		if (null != uid && uid != 0) {
			q.put("uid", uid);
		}
		if (null != taskId && taskId != 0) {
			q.put("taskId", taskId);
		}
		if (null != status && status != 0) {
			q.put("status", status);
		}
		return getC(DocName.USER_TASK).find(q).count();
	}

	/** 获取用户显示的所有任务列表(包含用户进度) */
	//TODO  根据项目方来展示任务
	public List<DBObject> getUserTaskList(Long uid) {
		// 获取所有的上线任务
		List<DBObject> dbos = taskService.findAllOnlineTasks(Const.STATUS_OK);
		if (uid == null || uid < 1) {
			// 用户没有登录
			for (DBObject dbo : dbos) {
				dbo.put("status", Const.STATUS_DEF);
			}
			return dbos;
		}
		List<Long> ids = new ArrayList<Long>();
		for (DBObject dbo : dbos) {
			ids.add(DboUtil.getLong(dbo, "_id"));
		}
		// 用户有记录的上线任务
		List<DBObject> dbos2 = super.getC(DocName.USER_TASK)
				.find(new BasicDBObject("uid", uid).append("taskId", new BasicDBObject("$in", ids))).toArray();

		Map<Long, DBObject> userTasks = new HashMap<Long, DBObject>();
		for (DBObject dbo : dbos2) {
			userTasks.put(DboUtil.getLong(dbo, "taskId"), dbo);
		}
		DBObject temp = null;
		// 组装任务列表
		long nowTime = System.currentTimeMillis();
		boolean expired = true;
		for (DBObject dbo : dbos) {
			// 检测是否已经过期 已过期true 未过期 false
			expired = taskIsExpired(DboUtil.getLong(dbo, "startTime"), DboUtil.getLong(dbo, "endTime"), nowTime);
			dbo.put("expired", expired);
			if (!expired) {
				temp = userTasks.get(DboUtil.getLong(dbo, "_id"));
				// 如果任务记录不为空
				if (temp != null) {
					// 如果任务的模版id 是每日做xxx任务 在每日任务列表里
					if (Task.daily.contains(DboUtil.getInt(dbo, "templateId"))) {
						// 任务的更新时间小于今天零点的时间 意味着今天没做任务 这是过去的任务
						if (DboUtil.getLong(temp, "updateTime") < DateUtil.getTodayZeroTime()) {
							// 删除过去的任务记录
							this.delUserTask(uid, DboUtil.getLong(temp, "_id"));
							// 本条任务当作没做过
							dbo.put("status", Const.STATUS_DEF);
							continue;
						}
					}
					dbo.put("plan", DboUtil.getInt(temp, "plan"));
					dbo.put("status", DboUtil.getInt(temp, "status"));
				} else {
					dbo.put("status", Const.STATUS_DEF);
				}
			}
		}
		return dbos;
	}

	/** 校验任务是否过期 */
	public boolean taskIsExpired(Long startTime, Long endTime, long nowTime) {
		if (startTime != null && endTime != null) {
			if (startTime < nowTime && nowTime < endTime) {
				return false;
			}
		}
		return true;
	}

	/** 点击做任务 */
	public ReMsg doTask(Long taskId, Long uid) {
		DBObject task = taskService.findById(taskId);
		Integer templateId = DboUtil.getInt(task, "templateId");
		Map<String, Object> res = new HashMap<String, Object>();
		if (templateId == Task.Template.TELEGRAM.getCode()) {
			// 加入telegram群组
			return telegramService.doTelegramTask(taskId, uid);
		} else if (templateId == Task.Template.TWITTER.getCode()) {
			// 关注推特
			res.put("type", Task.Template.TWITTER.getCode());
			// 推特账号 拼接对应的地址 或是数据库存的完整地址
			res.put("url", "https://twitter.com/" + DboUtil.getString(task, "twitterId"));
			res.put("urlType", "_self");
			return new ReMsg(ReCode.OK, res);
		} else if (templateId == Task.Template.INVITE_FRIENDS.getCode()) {
			// 邀请好友
			res.put("type", Task.Template.INVITE_FRIENDS.getCode());
			res.put("url", "www.baidu.com");
			res.put("urlType", "_self");
			return new ReMsg(ReCode.OK, res);
		}
		return new ReMsg(ReCode.FAIL);
	}

	/** 用户进行任务 返回值 该任务的最新状态 */
	public Integer doUserTask(DBObject task, long taskId, long uid, int cnt) {
		if (task == null) {
			task = taskService.findById(taskId);
		}
		Integer status = Const.STATUS_DEF;
		DBObject dbo = findByUidAndtaskId(uid, taskId);
		if (dbo == null) {// 没做过这个任务
			UserTask userTask = new UserTask(uid, taskId, cnt, Const.STATUS_DEF);
			if (cnt >= DboUtil.getInt(task, "endCondition")) {
				// 任务直接完成
				userTask.setPlan(DboUtil.getInt(task, "endCondition"));
				status = Const.STATUS_PROCESSED;
				userTask.setStatus(Const.STATUS_PROCESSED);
			} else {
				// 任务进行中
				userTask.setPlan(cnt);
			}
			userTask.setUpdateTime(System.currentTimeMillis());
			userTask.set_id(super.getNextId(DocName.USER_TASK));
			super.getMongoTemplate().save(userTask);
			return status;
		} else {
			Integer temp = DboUtil.getInt(dbo, "status");
			if (temp != null && temp == Const.STATUS_DEF) {
				temp = DboUtil.getInt(dbo, "plan");
				if (temp + cnt >= DboUtil.getInt(task, "endCondition")) {
					// 刚好做完这个任务 设置状态为待领取
					status = Const.STATUS_PROCESSED;
					dbo.put("status", Const.STATUS_PROCESSED);
					dbo.put("plan", DboUtil.getInt(task, "endCondition"));
				} else {
					dbo.put("plan", temp + cnt);
				}
				dbo.put("updateTime", System.currentTimeMillis());
				super.getC(DocName.USER_TASK).save(dbo);
				return status;
			}
			return status;
		}
	}

	/** 用户领取任务奖励 */
	public ReMsg recvReward(long uid, long taskId) {
		if (super.lock("recvReward:" + uid + "-" + taskId, 2)) {
			DBObject dbo = this.findByUidAndtaskId(uid, taskId);
			if (DboUtil.getInt(dbo, "status") == Const.STATUS_PROCESSED) {
				// 奖励是待领取
				HashMap<String, Integer> rewards = (HashMap<String, Integer>) taskService.findById(taskId)
						.get("rewards");
				// 发送任务奖励
				for (Entry<String, Integer> entry : rewards.entrySet()) {
					userWalletService.addCoin(uid, CoinLog.IN_TASK, taskId, entry.getKey(), entry.getValue(), 0,
							"领取任务奖励");
				}
				dbo.put("status", Const.STATUS_OK);
				dbo.put("updateTime", System.currentTimeMillis());
				super.getC(DocName.USER_TASK).save(dbo);
				super.unlock("recvReward:" + uid + "-" + taskId);
				return new ReMsg(ReCode.OK, rewards);
			}
			super.unlock("recvReward:" + uid + "-" + taskId);
		}
		return new ReMsg(ReCode.FAIL);
	}
}