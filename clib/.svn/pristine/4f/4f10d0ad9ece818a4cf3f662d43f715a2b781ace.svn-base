package com.we.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.we.common.Constant.Const;
import com.we.common.mongo.DboUtil;
import com.we.core.Page;
import com.we.models.Division.ConditiontType;
import com.we.models.DocName;
import com.we.models.UserDivision;
import com.we.models.finance.CoinLog;

/** 用户的段位完成度表 */
@Service
public class UserDivisionService extends BaseService {
	@Autowired
	UserService userService;

	@Autowired
	DivisionService divisionService;

	@Autowired
	UserWalletService userWalletService;

	static final Logger log = LoggerFactory.getLogger(UserDivisionService.class);

	public Page<DBObject> query(Long _id, Integer page, Integer size) {
		size = getSize(size);
		page = getPage(page);
		List<DBObject> dbos = find(_id, page, size);
		int count = count(_id);
		return new Page<DBObject>(count, size, page, dbos);
	}

	public int count(Long _id) {
		DBObject q = new BasicDBObject();
		if (_id != null && _id > 0) {
			q.put("_id", _id);
		}
		return getC(DocName.USER_DIVISION).find(q).count();
	}

	public List<DBObject> find(Long _id, Integer page, Integer size) {
		DBObject q = new BasicDBObject();
		if (_id != null && _id > 0) {
			q.put("_id", _id);
		}
		return getC(DocName.USER_DIVISION).find(q).skip(super.getStart(page, size)).limit(getSize(size))
				.sort(new BasicDBObject("updateTime", -1)).toArray();
	}

	public DBObject findById(long _id) {
		return getC(DocName.USER_DIVISION).findOne(new BasicDBObject("_id", _id));
	}

	public UserDivision getUserDivision(long _id) {
		DBObject dbo = this.findById(_id);
		if (dbo == null) {
			return new UserDivision(_id);
		}
		return DboUtil.toBean(dbo, UserDivision.class);
	}

	public void saveUserDivision(DBObject dbo) {
		dbo.put("updateTime", System.currentTimeMillis());
		super.getC(DocName.USER_DIVISION).save(dbo);
	}

	public void saveUserDivision(UserDivision userDivision) {
		userDivision.setUpdateTime(System.currentTimeMillis());
		super.getMongoTemplate().save(userDivision);
	}

	/** 获取用户显示的所有任务列表(包含用户进度) */
	public List<DBObject> getUserDivisionList(Long uid) {
		// 获取所有的段位列表
		List<DBObject> dbos = divisionService.findAllDivisionByStatus(Const.STATUS_OK);
		if (uid == null || uid < 1) {
			// 用户没有登录
			for (DBObject dbo : dbos) {
				dbo.put("status", Const.STATUS_DEF);
			}
			return dbos;
		}
		DBObject user = userService.findByIdSafe(uid);
		UserDivision userDivision = this.getUserDivision(uid);
		// 组装段位列表
		for (DBObject dbo : dbos) {//
			List<DBObject> conditions = DboUtil.get(dbo, "conditions", ArrayList.class);
			for (DBObject condition : conditions) {
				// 每个段位任务的进度
				condition.put("plan", userDivision.getConditionsVal(DboUtil.getInt(condition, "type")));
			}
			// 用户的段位还没有到达这个段位 设置为默认 即没完成段位任务
			if (DboUtil.getLong(user, "divisionId") < DboUtil.getLong(dbo, "_id")) {
				dbo.put("status", Const.STATUS_DEF);
			}
		}
		return dbos;
	}

	/** 用户做段位任务 */
	public void doDivisionTask(long uid, int conditionType) {
		// Thread t = new Thread(new Runnable() {
		// @Override
		// public void run() {
		DBObject user = userService.findById(uid);
		// 用户现在的段位
		Long divisionId = DboUtil.getLong(user, "divisionId");
		divisionId = divisionId == null || divisionId < 1 ? 0 : divisionId;
		// 做完任务之后的段位
		Long newDivisionId = null;
		// 系统中所有的上线段位
		List<DBObject> divisions = divisionService.findAllDivisionByStatus(Const.STATUS_OK);
		// 用户的段位进度
		UserDivision userDivision = getUserDivision(uid);
		boolean end = false;
		boolean userConditionChange = false;
		for (DBObject dbo : divisions) {
			if (DboUtil.getLong(dbo, "_id") > divisionId) {// 从用户当前段位的下一个段位起步
				List<DBObject> conditions = DboUtil.get(dbo, "conditions", ArrayList.class);
				if (conditions == null || conditions.size() == 0) {
					// 避免有不需要任务的段位出现
					break;
				}
				for (DBObject condition : conditions) {
					if (DboUtil.getInt(condition, "type") == conditionType) {
						if (userDivision.getConditionsVal(conditionType) >= DboUtil.getInt(condition, "cnt")) {
							// 已经达到结束条件
							return;
						}
						// 做任务
						userConditionChange = true;
						userDivision.addConditionsVal(conditionType, 1);
						// 做完这次任务达到结束条件
						if (userDivision.getConditionsVal(conditionType) >= DboUtil.getInt(condition, "cnt")) {
							// 发送任务奖励 递归的 给上级也发送的
							userWalletService.recursionAddCoin(uid, CoinLog.IN_DIVISION, conditionType,
									Const.COIN_CANDY_ID, DboUtil.getInt(condition, "reward"), 0,
									"完成段位任务:" + DboUtil.getString(condition, "detail"));
							userDivision.putConditionsVal(conditionType, DboUtil.getInt(condition, "cnt"));
						} else {
							// 只是刷新进度 还是没有达到结束条件
							end = true;
							break;
						}
					} else {// 不是当前做的任务 而且进度不满足
						if (userDivision.getConditionsVal(DboUtil.getInt(condition, "type")) < DboUtil.getInt(condition,
								"cnt")) {
							end = true;
							break;
						}
					}
				}
				if (end) {// 如果当前任务遍历结束 没达到要求 就证明这个段位没做完任务 结束循环
					break;
				} else {// 这个段位的任务遍历结束 全部满足 可以把这个段位给用户了 然后往下继续找段位
					newDivisionId = DboUtil.getLong(dbo, "_id");
				}
			}
		}
		// 用户段位进度有刷新 存储用户段位进度
		if (userConditionChange) {
			saveUserDivision(userDivision);
		}
		// 如果新的段位不是空 就证明最新段位已经刷新了
		if (newDivisionId != null) {
			// 给用户设置上最新段位
			userService.updateUserDivision(uid, newDivisionId);
			// 如果我的段位达到了黄金或者铂金 要做上级用户的m1达到黄金或铂金段位任务
			Long shareUid = DboUtil.getLong(user, "shareUid");
			if (newDivisionId == 3) {// 达到黄金段位
				if (shareUid != null && shareUid > 0) {
					// 我的直属下级达到黄金段位任务
					doDivisionTask(shareUid, ConditiontType.DIRECTLY_UNDER_TO_GOLD.getCode());
				}
			} else if (newDivisionId == 4) {// 达到铂金段位
				if (shareUid != null && shareUid > 0) {
					// 我的直属下级达到铂金段位任务
					doDivisionTask(shareUid, ConditiontType.DIRECTLY_UNDER_TO_PLATNUM.getCode());
				}
			}
		}
		// }
		// });
		// t.start();
	}

	public List<DBObject> getPersonMine(long uid) {
		List<DBObject> divisions = divisionService.findAllDivisionByStatus(Const.STATUS_OK);
		List<DBObject> res = new ArrayList<DBObject>();
		long divisionId = DboUtil.getLong(userService.findById(uid), "divisionId");
		for (int i = 0; i < divisions.size(); i++) {
			if (DboUtil.getLong(divisions.get(i), "_id") == divisionId) {
				DBObject dbo = null;
				for (int j = 0; j < divisions.size(); j++) {
					if (j == i - 1 || j == i || j == i + 1) {
						dbo = divisions.get(j);
						dbo.put("index", j + 1);
						if (j == i) {
							dbo.put("active", true);
						}
						res.add(dbo);
						if (j == i + 1) {
							break;
						}
					}
				}
				break;
			}
		}
		return res;
	}
	//
	public Map<String,Object> getRewardByDivison(long uid) { 
		List<DBObject> divisions = divisionService.findAllDivisionByStatus(Const.STATUS_OK);
		long divisionId = DboUtil.getLong(userService.findById(uid), "divisionId");
		int allReward=0; 
		Map<String,Object> map=new HashMap<>();
		for (int i = 0; i < divisions.size(); i++) {
			if (DboUtil.getLong(divisions.get(i), "_id") == divisionId) {
				List<DBObject> conditions =DboUtil.get(divisions.get(i), "conditions",null);
				for(DBObject obj:conditions) {
					allReward += DboUtil.getInt(obj,"reward");
					map.put("allReward", allReward);
				}
				map.put("name", DboUtil.getString(divisions.get(i), "name"));
			}
		}
		return map;
	}
}
