package com.we.service;

import java.util.Calendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.we.common.Constant.Const;
import com.we.common.Constant.ReCode;
import com.we.common.mongo.DboUtil;
import com.we.common.utils.DateUtil;
import com.we.common.utils.RandomUtil;
import com.we.common.utils.T2TUtil;
import com.we.core.web.ReMsg;
import com.we.models.DocName;
import com.we.models.finance.CoinLog;
import com.we.models.sign.Sign;
import com.we.models.sign.SignLog;
import com.we.models.sign.SignMonth;
import com.we.models.sign.SignWeek;
import com.we.view.SignMonthVO;
import com.we.view.SignWeekVO;

@Service
public class SignService extends BaseService {

	static final Logger log = LoggerFactory.getLogger(SignService.class);

	@Autowired
	UserService userService;

	@Autowired
	UserWalletService userWalletService;

	public List<DBObject> findLogByUid(Long userId, int page, int size) {
		return getC(DocName.SIGN_LOG).find(new BasicDBObject("userId", userId)).sort(new BasicDBObject("day", -1))
				.skip(getStart(page, size)).limit(getSize(size)).toArray();
	}

	public DBObject findLogByUid(Long userId) {
		String id = DateUtil.curDay() + "_" + userId;
		return getC(DocName.SIGN_LOG).findOne(new BasicDBObject("_id", id));
	}

	public DBObject findById(Long userId) {
		return getC(DocName.SIGN).findOne(new BasicDBObject("_id", userId));
	}

	public Sign getSign(Long userId) {
		return DboUtil.toBean(findById(userId), Sign.class);
	}

	public SignMonth getSignMonth(Long uid, int month) {
		String id = month + "-" + uid;
		DBObject dbo = getC(DocName.SIGN_MONTH).findOne(new BasicDBObject("_id", id));
		if (dbo == null) {
			return new SignMonth(uid, month);
		}
		return DboUtil.toBean(dbo, SignMonth.class);
	}

	public ReMsg isSign(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.NOT_AUTHORIZED);
		}
		int month = getCurMonth();
		SignMonth sm = getSignMonth(userId, month);
		int day = getToday();
		int cnt = 3;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 99) {
			cnt = 6;
		}
		for (Integer cur : sm.getDays()) {
			if (day == cur) {
				return new ReMsg(ReCode.HAVE_BEEN_SIGNED, new SignMonthVO(sm, 0, cnt));
			}
		}
		return new ReMsg(ReCode.OK, new SignMonthVO(sm, 0, cnt));
	}

	private int getCurMonth() {
		Calendar c = Calendar.getInstance();
		return c.get(Calendar.YEAR) * 100 + c.get(Calendar.MONTH) + 1;
	}

	private int getToday() {
		Calendar c = Calendar.getInstance();
		return c.get(Calendar.DAY_OF_MONTH);
	}

	int[] draws = { 3, 7, 14, 28 };

	public ReMsg sign(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.ACCESS_TOKEN_ERR);
		}
		int month = getCurMonth();
		SignMonth sm = getSignMonth(userId, month);
		int day = getToday();
		int cnt = 3;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 99) {
			cnt = 6;
		}

		for (Integer cur : sm.getDays()) {
			if (day == cur) {
				return new ReMsg(ReCode.HAVE_BEEN_SIGNED, new SignMonthVO(sm, 0, cnt));
			}
		}
		sm.addDay(day);

		int max = sm.getDays().size();
		if (max < day) {
			max = 1;
			for (int i = sm.getDays().size() - 1; i > 0; i--) {
				if (sm.getDays().get(i) - sm.getDays().get(i - 1) == 1) {
					max++;
				} else {
					break;
				}
			}
		}
		for (int i = 0; i < draws.length; i++) {
			if (draws[i] <= max) {
				if (!sm.hasDraw(draws[i])) {
					sm.putDraw(draws[i], false);
				}
			} else {
				break;
			}
		}

		super.getMongoTemplate().save(sm);
		save(userId, DateUtil.curDay(), getIp(req), getDevId(req), getVia(req));

		int coin = 100 + 10 * sm.getDays().size();
		// TODO 签到增加金币
		// coinService.addCoin(userId, CoinLog.IN_SIGN, day, coin, 0L, "Sign");
		return new ReMsg(ReCode.OK, new SignMonthVO(sm, coin, cnt));
	}

	public ReMsg reSign(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.ACCESS_TOKEN_ERR);
		}
		int month = getCurMonth();
		SignMonth sm = getSignMonth(userId, month);
		int day = getToday();

		int rDay = 0;

		int size = sm.getDays().size();

		int cnt = 3;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 99) {
			cnt = 6;
		}
		if (day == 1) {
			return new ReMsg(ReCode.NO_RESIGN);
		}
		if (size == day) {
			return new ReMsg(ReCode.NO_RESIGN);
		}

		int lastDay = 0;
		if (size > 0) {
			lastDay = sm.getDays().get(size - 1);
		}
		if (day - lastDay > 1) {// 今日未签到，昨日也没签到，补签昨日
			rDay = day - 1;
		}
		if (rDay == 0 && size > 0) {// 昨日已经签到
			if (day - lastDay < 2 && day != 1) {
				for (int i = size - 1; i > 0; i--) {
					if (sm.getDays().get(i) - sm.getDays().get(i - 1) != 1) {
						rDay = sm.getDays().get(i) - 1;
						break;
					}
				}
				if (rDay == 0 && sm.getDays().get(0) != 1) {
					rDay = sm.getDays().get(0) - 1;
				}
			}
		}

		if (rDay == 0) {
			return new ReMsg(ReCode.NO_RESIGN);
		}
		sm.addRetroactive(rDay);

		int amount = sm.getRetroactive().size() * 100;

		// TODO 补签扣除金币
		ReCode r = userWalletService.reduce(userId, CoinLog.OUT_RESIGN, rDay, Const.COIN_CANDY_ID, amount, 0,
				"补签扣币:" + amount);
		if (r.reCode() != ReCode.OK.reCode()) {
			return new ReMsg(r);
		}

		int max = 1;
		for (int i = sm.getDays().size() - 1; i > 0; i--) {
			if (sm.getDays().get(i) - sm.getDays().get(i - 1) == 1) {
				max++;
			} else {
				break;
			}
		}
		for (int i = 0; i < draws.length; i++) {
			if (draws[i] <= max) {
				if (!sm.hasDraw(draws[i])) {
					sm.putDraw(draws[i], false);
				}
			} else {
				break;
			}
		}

		super.getMongoTemplate().save(sm);

		int coin = 100 + 10 * lastDay;
		userWalletService.reduce(userId, CoinLog.IN_SIGN, rDay, Const.COIN_CANDY_ID, coin, 0, "签到加币:" + amount);

		return new ReMsg(ReCode.OK, new SignMonthVO(sm, 0, cnt));
	}

	private static int[] prize = { 100, 200, 300, 400, 600, 800, 1000 };
	private static int[][] rates = { { 550, 750, 850, 910, 950, 980, 1001 }, { 200, 350, 600, 800, 890, 960, 1001 },
			{ 0, 0, 0, 300, 500, 800, 1001 }, { 0, 0, 0, 0, 400, 700, 1001 } };

	public ReMsg draw(int month, int cycle) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.ACCESS_TOKEN_ERR);
		}

		int draw = -1;
		for (int i = 0; i < draws.length; i++) {
			if (cycle == draws[i]) {
				draw = i;
				break;
			}
		}
		if (draw > -1) {
			SignMonth sm = getSignMonth(userId, month);
			if (sm.hasDraw(cycle) && !sm.getDraws().get(cycle)) {
				int r = RandomUtil.nextInt(1000) + 1;
				int idx = 0;
				for (int i = 0; i < rates[draw].length; i++) {
					if (r < rates[draw][i]) {
						idx = i;
						break;
					}
				}
				int coin = prize[idx];
				sm.putDraw(cycle, true);
				super.getMongoTemplate().save(sm);
				// TODO连续签到抽奖
				// coinService.addCoin(userId, CoinLog.IN_SIGN, cycle, coin, 0L, "连续签到抽奖");
				return new ReMsg(ReCode.OK, coin);
			}
		}
		return new ReMsg(ReCode.FAIL);
	}

	private void save(Long userId, Integer day, String ip, String devId, int via) {
		SignLog sl = new SignLog(userId, day, ip, devId, via);
		super.getMongoTemplate().save(sl);
	}

	/*
	 * 以下为按周签到代码
	 */

	public ReMsg isSignWeek(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.NOT_AUTHORIZED);
		}
		return isSignWeek(userId);
	}

	// 查询本周 签到情况的方法
	private ReMsg isSignWeek(long userId) {
		int week = getCurWeek();
		SignWeek sw = getSignWeek(userId, week);
		int day = getTodayOfWeek();
		int cnt = 1;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 599) {
			cnt = 2;
		}
		// 如果第day天已经签到
		if (checkSign(sw, day)) {
			return new ReMsg(ReCode.HAVE_BEEN_SIGNED, new SignWeekVO(day, sw, getRewardWeek(0), cnt));
		}
		return new ReMsg(ReCode.OK, new SignWeekVO(day, sw, getRewardWeek(sw.getDays().size() + 1), cnt));
	}

	// 签到的方法 给奖励
	public ReMsg signWeek(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.ACCESS_TOKEN_ERR);
		}
		int week = getCurWeek();
		SignWeek sw = getSignWeek(userId, week);

		int day = getTodayOfWeek();
		int cnt = 1;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 599) {
			cnt = 2;
		}
		// 如果第day天已经签到
		if (checkSign(sw, day)) {
			return new ReMsg(ReCode.HAVE_BEEN_SIGNED, new SignWeekVO(day, sw, getRewardWeek(0), cnt));
		}
		sw.addDay(day);
		super.getMongoTemplate().save(sw);
		save(userId, DateUtil.curDay(), getIp(req), getDevId(req), getVia(req));
		return signDrawWeek(userId, sw.getDays().size(), sw);
	}

	// 补签的方法 先判断补签次数
	public ReMsg reSignWeek(HttpServletRequest req) {
		long userId = super.getUid();
		if (userId < 1) {
			return new ReMsg(ReCode.ACCESS_TOKEN_ERR);
		}
		int week = getCurWeek();
		SignWeek sw = getSignWeek(userId, week);

		int day = getTodayOfWeek();
		int cnt = 1;
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 599) {
			cnt = 2;
		}
		// 如果该天还没有签到
		if (!checkSign(sw, day)) {
			return new ReMsg(ReCode.FAIL, new SignWeekVO(day, sw, getRewardWeek(sw.getDays().size() + 1), cnt));
		}

		// 如果该天已经签到
		if (checkSign(sw, day)) {
			// 如果 未签的天数 小于0
			if (day - sw.getDays().size() <= 0) {
				return new ReMsg(ReCode.NO_RESIGN, new SignWeekVO(day, sw, getRewardWeek(0), cnt));
			}
		}

		int amount = getNeedMoney(sw.getRetroactive().size());

		// TODO 补签扣除金币
		ReCode r = userWalletService.reduce(userId, CoinLog.OUT_RESIGN, sw.getDays().size() + 1, Const.COIN_CANDY_ID,
				amount, 0, "补签扣币:" + amount);
		if (r.reCode() != ReCode.OK.reCode()) {
			return new ReMsg(r);
		}
		// 签到记录 今天是第几天 签到的 补签记录同时会进入正常签到记录
		sw.addRetroactive(day);
		super.getMongoTemplate().save(sw);
		save(userId, DateUtil.curDay(), getIp(req), getDevId(req), getVia(req));
		return signDrawWeek(userId, sw.getDays().size(), sw);
	}

	/** 发送签到奖励 */
	public ReMsg signDrawWeek(long userId, int day, SignWeek sw) {
		int cnt = 1;
		// 判断VIP等级
		if (T2TUtil.obj2Int(super.getUser("vip"), 0) > 599) {
			// 设置为两次
			cnt = 2;
		}
		// 按照天数发送签到奖励
		if (day == 1) {

		} else if (day == 2) {

		} else if (day == 4) {

		}
		return new ReMsg(ReCode.OK, new SignWeekVO(getTodayOfWeek(), sw, getRewardWeek(day), cnt));
	}

	// app前台展示所使用的文字描述 无用
	private String getRewardWeek(int day) {
		if (day == 1) {
			return "鲜花" + "×" + "5";
		}
		if (day == 2) {
			return "金币" + "×" + "200";
		}
		if (day == 3) {
			return "铜宝箱" + "×" + "1";
		}
		if (day == 4) {
			return "经验" + "×" + "1000";
		}
		if (day == 5) {
			return "银宝箱" + "×" + "1";
		}
		if (day == 6) {
			return "鲜花" + "×" + "10";
		}
		if (day == 7) {
			return "金宝箱" + "×" + "1";
		}
		return "无可领取";
	}

	// 获取补签所需金币
	private int getNeedMoney(int num) {
		if (num == 0) {
			return 100;
		}
		if (num == 1) {
			return 300;
		}
		return 0;
	}

	// 获取本周签到对象
	public SignWeek getSignWeek(Long uid, int week) {
		String id = week + "-" + uid;
		DBObject dbo = getC(DocName.SIGN_WEEK).findOne(new BasicDBObject("_id", id));
		if (dbo == null) {
			return new SignWeek(uid, week);
		}
		return DboUtil.toBean(dbo, SignWeek.class);
	}

	/** 今天是本周第几天 */
	private int getTodayOfWeek() {
		Calendar c = Calendar.getInstance();
		int day = c.get(Calendar.DAY_OF_WEEK);
		return day == 1 ? 7 : day - 1;
	}

	/** 获取年和周 201829 */
	private int getCurWeek() {
		Calendar c = Calendar.getInstance();
		c.setTimeInMillis(DateUtil.getWeekZeroTime());
		return c.get(Calendar.YEAR) * 100 + c.get(Calendar.WEEK_OF_YEAR);
	}

	/** 今天是否已经签到 */
	private Boolean checkSign(SignWeek sw, int day) {
		if (sw.getDays().contains(day))
			return true;
		return false;
	}

}
