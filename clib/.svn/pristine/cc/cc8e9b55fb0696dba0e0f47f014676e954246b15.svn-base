package com.we.service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.mongodb.DBObject;
import com.we.common.Constant.Const;
import com.we.common.Constant.ReCode;
import com.we.common.Constant.ThirdIdType;
import com.we.common.crypto.MDUtil;
import com.we.common.mongo.DboUtil;
import com.we.common.redis.RK;
import com.we.common.utils.JSONUtil;
import com.we.core.web.ReMsg;
import com.we.models.userTask.Task;
import com.we.service.userTask.TaskService;
import com.we.service.userTask.UserTaskService;

@Service
public class TelegramService extends BaseService {

	@Autowired
	UserThirdIdService userThirdIdService;

	@Autowired
	TaskService taskService;

	@Autowired
	UserTaskService userTaskService;

	static final Logger log = LoggerFactory.getLogger(TelegramService.class);

	// 机器人token
	public static final String BOT = "bot";
	public static final String BOT_NAME = "wangwangBot";
	public static final String BOT_TOKEN = "531552833:AAGdRy8lR0YJ8utJV1HQ11FnZXwgLB_PMrk";

	// 开始的start指令
	public static final String START = "start";
	public static final String START_URL = "https://t.me/" + BOT_NAME + "?" + START + "=";

	// 发送消息地址
	public static final String SENDMESSAGE = "https://api.telegram.org/bot" + BOT_TOKEN + "/sendMessage";
	// 发送消息参数 用户id 文本内容
	public static final String CHAT_ID = "chat_id";
	public static final String TEXT = "text";

	// 网址打开方式
	public static final String URL_SELF = "_self";
	public static final String URL_BLANK = "_blank";

	// candy.club task界面
	public static final String TASK_URL = "https://candy.club/task";

	/** 点击做任务 */
	public ReMsg doTelegramTask(Long taskId, Long uid) {
		ValueOperations<String, String> opsv = getRedisTemplate().opsForValue();
		String md5Key = getMD5Key(uid, taskId);
		opsv.set(RK.telegramKey(md5Key), uid + "-" + taskId, 1, TimeUnit.DAYS);
		Map<String, Object> res = new HashMap<String, Object>();
		// 类型 telegram
		res.put("type", Task.Template.TELEGRAM.getCode());
		// 要跳转的url
		res.put("url", START_URL + md5Key);
		// 打开方式
		res.put("urlType", URL_SELF);
		return new ReMsg(ReCode.OK, res);
	}

	/** 根据用户id和任务id生成唯一的串 */
	private String getMD5Key(long uid, Long taskId) {
		return MDUtil.SHA.digest2HEX(uid + "" + taskId);
	}

	/** 获取发送地址URL */
	public String getSendMessageUrl(long chat_id, String text) {
		return SENDMESSAGE + "?chat_id=" + chat_id + "&text=" + text;
	}

	/** 调用telegram的接口发送信息 */
	void sendMessage(Integer userTelegarmId, String text) {
		System.setProperty("sun.net.client.defaultConnectTimeout", "20000"); // 连接超时：20秒
		System.setProperty("sun.net.client.defaultReadTimeout", "20000"); // 读取超时：20秒
		StringBuffer buffer = new StringBuffer(getSendMessageUrl(userTelegarmId, text));
		try {
			URL url = new URL(buffer.toString());
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Connection", "Keep-Alive");
			BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * webhook回调
	 */
	public ReCode callBack(String json) {
		Map<String, Object> map = JSONUtil.jsonToMap(json);
		map = (Map<String, Object>) map.get("message");
		if (json.contains("new_chat_member") && json.contains("new_chat_participant")) {// 是加入群组消息
			// 拿到群聊新用户的信息
			Map<String, Object> temp = (Map<String, Object>) map.get("new_chat_member");
			// 拿到加入群组的用户id
			Integer userTelegarmId = (Integer) temp.get("id");
			// 拿到群聊的信息
			temp = (Map<String, Object>) map.get("chat");
			// 拿到群的id
			Long telegarmGroupId = (Long) temp.get("id");
			// 拿telegramUid跟自己的数据库user比对 看能不能找到一个本数据库的uid
			DBObject dbo = userThirdIdService.findByThirdId(ThirdIdType.TELEGRAM.getType(), userTelegarmId.toString());
			if (dbo != null) {
				Long uid = DboUtil.getLong(dbo, "_id");
				// 根据群组id定位任务
				DBObject task = taskService.findByTelegramID(telegarmGroupId);
				if (task != null) {
					Long taskId = DboUtil.getLong(task, "_id");
					// 根据用户id和任务id找到用户的任务日志
					DBObject userTask = userTaskService.findByUidAndtaskId(uid, taskId);
					if (userTask == null || DboUtil.getInt(userTask, "status") == Const.STATUS_DEF) {
						Integer status = userTaskService.doUserTask(task, taskId, uid, Integer.valueOf(1));
						if (Const.STATUS_PROCESSED == status || Const.STATUS_OK == status) {
							// 任务做完了 给用户发送完成任务的消息
							sendMessage(userTelegarmId, "任务做完啦～～～～快回去领奖励吧 " + TASK_URL);
						}
						// } else {
						// // 任务已经结束了
						// sendMessage(userTelegarmId, "任务已经结束了 别再来了 去网站吧 " + TASK_URL);
					}
					return ReCode.OK;
				}
			}
		} else if (json.contains("text") && json.contains("entities") && json.contains(START)) {
			// 属于start指令 拿到指令内容 截去前几位 一个/的长度+自定义的start长度+一个空格的长度
			String key = (String) map.get("text");
			key = key.substring(START.length() + 2);

			ValueOperations<String, String> opsv = getRedisTemplate().opsForValue();
			String object = opsv.get(RK.telegramKey(key));
			if (StringUtils.isNotBlank(object)) {
				super.getRedisTemplate().delete(RK.telegramKey(key));
				// 拿到消息的来源 哪个telegramUid要做哪些事情
				map = (Map<String, Object>) map.get("from");
				Integer userTelegarmId = (Integer) map.get("id");

				String[] split = object.split("-");
				// 绑定用户与telegramUid
				userThirdIdService.putThirdId(Long.parseLong(split[0]), ThirdIdType.TELEGRAM.getType(),
						userTelegarmId.toString());
				// 要做什么任务
				DBObject task = taskService.findById(Long.parseLong(split[1]));
				// 任务不为空
				if (task != null) {
					String telegramUrl = DboUtil.getString(task, "telegramUrl");
					String text = "Join Telegram Group:  " + telegramUrl;
					// 发送加入群组消息
					sendMessage(userTelegarmId, text);
					return ReCode.OK;
				}
			}
		} else if (json.contains("text") && json.contains("entities") && json.contains("/test")) {
			// 测试使用
			String text = (String) map.get("text");
			// 拿到消息来源的用户id
			map = (Map<String, Object>) map.get("from");
			Integer userTelegarmId = (Integer) map.get("id");
			// 发送消息
			sendMessage(userTelegarmId, "This is the test ! Your text:" + text + "。And your ID is : " + userTelegarmId);
			return ReCode.OK;
		}
		return ReCode.FAIL;

	}

}
